name: Bigquery external tables CI/CD

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'external_tables/**'
  push:
    branches: [ main ]
    paths:
      - 'external_tables/**'

permissions:
  contents: read

jobs:
  # 変更されたディレクトリを検出するジョブ
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed directories
        id: set-matrix
        run: |
          # PRの場合は base と head を比較、push の場合は前のコミットと比較
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # 変更されたディレクトリを抽出
          CHANGED_DIRS=""
          for dir in "external_tables/asset_name_master" "external_tables/asset_status_history" "external_tables/trade_history"; do
            if echo "$CHANGED_FILES" | grep -q "^$dir/"; then
              if [ -z "$CHANGED_DIRS" ]; then
                CHANGED_DIRS="\"$dir\""
              else
                CHANGED_DIRS="$CHANGED_DIRS,\"$dir\""
              fi
            fi
          done
          
          # 環境のマトリックス
          ENVIRONMENTS="[\"dev\",\"prod\"]"
          
          if [ -n "$CHANGED_DIRS" ]; then
            MATRIX="{\"directory\":[$CHANGED_DIRS],\"environment\":$ENVIRONMENTS}"
          else
            # 変更がない場合は空のマトリックス
            MATRIX="{\"directory\":[],\"environment\":[]}"
          fi
          
          echo "Matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  terraform:
    needs: detect-changes
    runs-on: ubuntu-latest
    if: ${{ needs.detect-changes.outputs.matrix != '{"directory":[],"environment":[]}' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}

    env:
      TF_VAR_google_credentials: ${{ matrix.environment == 'prod' && secrets.TERRAFORM_GCA_PROD || secrets.TERRAFORM_GCA_DEV }}
      TF_IN_AUTOMATION: "true"
      TF_INPUT: "false"
      # 環境に応じてプロジェクトIDを変更
      TF_VAR_project_id: ${{ matrix.environment == 'prod' && 'trading-prod-468212' || 'trading-dev-469206' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Init
        run: terraform init -input=false
        working-directory: ${{ matrix.directory }}

      # 常にformatチェックを実行
      - name: Terraform Format
        run: terraform fmt -check
        working-directory: ${{ matrix.directory }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.directory }}

      # 既存リソースをstateにインポート（エラーが出ても継続）
      - name: Import Existing Resources (if any)
        run: |
          # テーブル名を動的に設定
          if [[ "${{ matrix.directory }}" == "external_tables/asset_name_master" ]]; then
            TABLE_ID="raw_asset_name_master"
          elif [[ "${{ matrix.directory }}" == "external_tables/asset_status_history" ]]; then
            TABLE_ID="raw_asset_status_history"
          elif [[ "${{ matrix.directory }}" == "external_tables/trade_history" ]]; then
            TABLE_ID="raw_trade_history"
          fi
          
          # データセット名を環境に応じて変更
          DATASET_ID=${{ matrix.environment == 'prod' && 'trading' || 'trading_dev' }}
          
          # 既存のBigQueryテーブルをインポートを試行（失敗しても継続）
          echo "Attempting to import existing table: $TABLE_ID in environment: ${{ matrix.environment }}"
          terraform import google_bigquery_table.external_sheet "$TF_VAR_project_id:${DATASET_ID}:$TABLE_ID" || echo "Import failed or resource doesn't exist - continuing..."
        working-directory: ${{ matrix.directory }}
        continue-on-error: true

      # PR時: dev/prod両方でplan実行、devのみapply
      - name: Terraform Plan (PR)
        if: github.event_name == 'pull_request'
        run: |
          echo "=== Planning for ${{ matrix.environment }} environment ==="
          terraform plan -no-color -out=tfplan-${{ matrix.environment }}
          
          # planに変更がある場合の詳細確認
          if terraform show -no-color tfplan-${{ matrix.environment }} | grep -E "(will be created|will be updated|will be destroyed)" > /dev/null; then
            echo "Changes detected in plan for ${{ matrix.environment }}"
            # 既存テーブルとの競合を避けるため、replaceオプションでplanを再作成
            terraform plan -no-color -replace=google_bigquery_table.external_sheet -out=tfplan-${{ matrix.environment }}
          else
            echo "No changes detected for ${{ matrix.environment }}"
          fi
        working-directory: ${{ matrix.directory }}

      # PR時: devのみapply
      - name: Terraform Apply Dev (PR)
        if: github.event_name == 'pull_request' && matrix.environment == 'dev'
        run: |
          echo "=== Applying to dev environment ==="
          terraform apply -auto-approve tfplan-dev
        working-directory: ${{ matrix.directory }}

      # merge時: prodのみplan & apply
      - name: Terraform Plan Prod (main)
        if: github.event_name == 'push' && matrix.environment == 'prod'
        run: |
          echo "=== Planning for prod environment ==="
          terraform plan -no-color -out=tfplan-prod
          
          # planに変更がある場合の詳細確認
          if terraform show -no-color tfplan-prod | grep -E "(will be created|will be updated|will be destroyed)" > /dev/null; then
            echo "Changes detected in plan for prod"
            # 既存テーブルとの競合を避けるため、replaceオプションでplanを再作成
            terraform plan -no-color -replace=google_bigquery_table.external_sheet -out=tfplan-prod
          else
            echo "No changes detected for prod"
          fi
        working-directory: ${{ matrix.directory }}

      # merge時: prodのみapply
      - name: Terraform Apply Prod (main)
        if: github.event_name == 'push' && matrix.environment == 'prod'
        run: |
          echo "=== Applying to prod environment ==="
          terraform apply -auto-approve tfplan-prod
        working-directory: ${{ matrix.directory }}

      # 不要なジョブをスキップ（dev環境でのmerge時など）
      - name: Skip unnecessary jobs
        if: github.event_name == 'push' && matrix.environment == 'dev'
        run: echo "Skipping dev environment for merge events"